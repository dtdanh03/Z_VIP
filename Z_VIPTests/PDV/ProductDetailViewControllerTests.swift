//
//  ProductDetailViewControllerTests.swift
//  Z_VIP
//
//  Created by Danh Dang on 11/30/17.
//  Copyright (c) 2017 com.zalora. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Z_VIP
import XCTest

class ProductDetailViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: ProductDetailViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupProductDetailViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupProductDetailViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "ProductDetailViewController") as! ProductDetailViewController
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class ProductDetailBusinessLogicSpy: ProductDetailBusinessLogic {
        var fetchImageListCalled = false
        
        func fetchImageList(for request: ProductDetail.Request) {
            fetchImageListCalled = true
        }
    }
    
    class CollectionViewSpy: UICollectionView {
        var isReloadDataCalled = false
        
        convenience init() {
            self.init(frame: CGRect.zero, collectionViewLayout: UICollectionViewFlowLayout())
        }
        
        override func reloadData() {
            isReloadDataCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldFetchImageList() {
        // Given
        let spy = ProductDetailBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.fetchImageListCalled, "viewDidLoad() should ask the interactor to fetch image list")
    }
    
    func testDisplayProductShouldTriggerReloadData() {
        // Given
        loadView()
        let collectionViewSpy = CollectionViewSpy()
        sut.collectionView = collectionViewSpy
        let mockViewModel = ProductDetail.ViewModel(product: Product.productDetailDisplayProduct(from: MockModels.product1), imageList: ["a", "b", "c", "d"])
        
        // When
        sut.display(productDetail: mockViewModel)
        
        // Then
        XCTAssertTrue(collectionViewSpy.isReloadDataCalled, "display(productDetail:) should trigger collection view reload data")
    }
    
    func testNumberOfSectionInCollectionViewShouldBeOne() {
        //Given
        loadView()
        let collectionView = sut.collectionView
        
        //When
        let numberOfSection = sut.numberOfSections(in: collectionView!)
        
        //Then
        XCTAssertEqual(numberOfSection, 1, "Number of section in collection view should always be one")
    }
    
    func testNumberOfItemShouldEqualToNumberOfProductInViewModel() {
        //Given
        loadView()
        let collectionView = sut.collectionView
        let imageList = ["a", "b", "c", "d"]
        sut.product = ProductDetail.ViewModel(product: Product.productDetailDisplayProduct(from: MockModels.product1), imageList: imageList)
        
        //When
        let numberOfItems = sut.collectionView(collectionView!, numberOfItemsInSection: 0)
        
        //Then
        XCTAssertEqual(imageList.count, numberOfItems, "Number of images to display should be equal to number of item in view model")
    }
    
    func testCollectionViewCellShouldDisplayCorrectInformation() {
        //Given
        loadView()
        let displayProduct = Product.productDetailDisplayProduct(from: MockModels.product1)
        let mockViewModel = ProductDetail.ViewModel(product: displayProduct, imageList: ["a", "b", "c", "d"])
        
        //When
        sut.display(productDetail: mockViewModel)
        
        //Then
        XCTAssertEqual(sut.nameLabel.text, "Product name: \(displayProduct.name)", "Product name label should display correct product name")
        XCTAssertEqual(sut.brandLabel.text, "Brand: \(displayProduct.brand)", "Product brand label should display correct product brand")
        XCTAssertEqual(sut.priceLabel.text, "Price: \(displayProduct.price)", "Product price label should display correct product price")
    }
}
