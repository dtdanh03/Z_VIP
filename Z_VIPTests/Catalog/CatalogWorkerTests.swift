//
//  CatalogWorkerTests.swift
//  Z_VIP
//
//  Created by Danh Dang on 11/30/17.
//  Copyright (c) 2017 com.zalora. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Z_VIP
import XCTest

class CatalogWorkerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: CatalogWorker!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupCatalogWorker()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupCatalogWorker() {
        sut = CatalogWorker(productService: MockProductService())
    }
    
    // MARK: Test doubles
    
    // MARK: Tests
    
    func testFetchProductsSuccess() {
        //Given
        let expect = expectation(description: "Catalog worker should successfully return products")
        var resultProducts: [Product] = []
        //When
        sut.fetchProduct { (result) in
            switch result {
            case .success(let products):
                resultProducts = products
                expect.fulfill()
            case .failure(_):
                break
            }
        }
        
        //Then
        waitForExpectations(timeout: 1) { (error) in
            if let error = error {
                print(error)
            }
        }
        XCTAssertEqual(resultProducts, MockModels.products, "fetchProduct() should return correct data")
    }
    
    func testFetchProductFailure() {
        //Given
        let expect = expectation(description: "Catalog worker should return error if fetchProduct() fail")
        sut.productService = MockProductService(shouldReturnFailure: true)
        //When
        sut.fetchProduct { (result) in
            switch result {
            case .success(_):
                break
            case .failure(_):
                expect.fulfill()
            }
        }
        
        //Then
        waitForExpectations(timeout: 1) { (error) in
            if let error = error {
                print(error)
            }
        }
    }
    
}
